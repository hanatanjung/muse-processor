import Croppr from 'croppr';import "croppr/src/css/croppr.css";import "../../scss/ppt.scss";import pptxgen from "pptxgenjs";import convert from "convert-length";export default class PptGenerator {    constructor(form) {        this.form = form;        window.cropprs = {};        window.cropValues = {};        this._eventListeners();    }    _eventListeners() {        this.form.onsubmit = (e) => {            e.preventDefault();            fetch(e.target.action, {                method: 'POST',                body: new FormData(e.target)            })                .then(response => response.json())                .then(response => {                    if (response.success) {                        this._displaySelections(response.files[1]);                        this.pptTitle = response.title;                        this.files = response.files;                    }                });        };        document.getElementById('create-ppt').onclick = this._generatePPT.bind(this);    }    _displaySelections(images) {        let container = document.getElementById('scores-display');        container.innerHTML = '';        for (const [page, path] of Object.entries(images)) {            let wrapper = document.createElement('figure');            wrapper.classList.add('mx-2');            if (page === '1') {                let title = document.createElement('button');                title.classList.add('button', 'is-primary', 'mx-1');                title.innerText = 'Title';                title.setAttribute('data-page', page);                title.setAttribute('data-slide', 'title');                title.onclick = this._registerCrop;                wrapper.appendChild(title);            }            for (let i = 0; i < 4 ; i++) {                let slideCrop = document.createElement('button');                slideCrop.classList.add('button', 'is-primary', 'mx-1');                slideCrop.innerText = 'Slide ' + (i+1);                slideCrop.setAttribute('data-page', page);                slideCrop.setAttribute('data-slide', i);                slideCrop.onclick = this._registerCrop;                wrapper.appendChild(slideCrop);            }            let img = document.createElement('img');            img.src = path;            img.id = 'croppr-' + page;            img.classList.add('image');            // append to container            wrapper.appendChild(img);            container.appendChild(wrapper);            // init cropper            img.addEventListener('load', (e) => {                window.cropprs[page] = new Croppr('#' + e.target.id);            });        }    }    _registerCrop(e) {        let page = parseInt(e.target.dataset.page),            slide = e.target.dataset.slide;        if (slide === 'title') {            window.cropValues[slide] = window.cropprs[page].getValue();        } else {            slide = parseInt(slide);            if (! window.cropValues[page]) {                window.cropValues[page] = {[slide]: window.cropprs[page].getValue()};            } else {                window.cropValues[page][slide] = window.cropprs[page].getValue();            }        }        // print        document.getElementById('crop-values-reader').innerHTML = JSON.stringify(window.cropValues, null, 2);    }    _generatePPT(e) {        let titleCrop = window.cropValues.title;        delete window.cropValues.title;        // Create a new Presentation        let pres = new pptxgen();        pres.layout = 'LAYOUT_16x10';        for (let verse in this.files) {            for (let page in this.files[verse]) {                for (let slideNum in window.cropValues[page]) {                    // Add a Slide                    let data = window.cropValues[page][slideNum],                        slide = pres.addSlide();                    slide                        .addImage({                            path: this.files[verse][page],                            x: '50%',                            w: '100%',                            y: '2%',                            sizing: {                                type: 'crop',                                x: convert(data.x, 'px', 'in'),                                y: convert(data.y, 'px', 'in'),                                w: convert(data.width, 'px', 'in'),                                h: convert(data.height, 'px', 'in')                            }                        })                        .addImage({                            path: this.files[verse]["1"],                            x: '50%',                            y: '95%',                            w: '85%',                            sizing: {                                type: 'crop',                                x: convert(titleCrop.x, 'px', 'in'),                                y: convert(titleCrop.y, 'px', 'in'),                                w: convert(titleCrop.width, 'px', 'in'),                                h: convert(titleCrop.height, 'px', 'in')                            }                        });                }            }        }        // Save the Presentation        pres.writeFile(this.pptTitle + '.pptx')            .then(filename => {                console.log('Successfully created ' + filename);            })            .catch(err => {                console.error(err);            });    };}
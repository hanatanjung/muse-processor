/* global PptxGenJS */import Croppr from 'croppr';import "croppr/src/css/croppr.css";import "../../scss/ppt.scss";export default class PptGenerator {    constructor(form) {        this.form = form;        this.createPPTbutton = document.getElementById('create-ppt');        window.cropprs = {};        window.cropValues = {};        this._eventListeners();    }    _eventListeners() {        this.form.onsubmit = (e) => {            e.preventDefault();            fetch(e.target.action, {                method: 'POST',                body: new FormData(e.target)            })                .then(response => response.json())                .then(response => {                    if (response.success) {                        this._displaySelections(response.files[1]);                        this.pptTitle = response.title;                        this.files = response.files;                        this.imgFullWidth = response.width;                    }                });        };        this.createPPTbutton.onclick = this._generatePPT.bind(this);    }    _displaySelections(images) {        let container = document.getElementById('scores-display');        container.innerHTML = '';        this.createPPTbutton.removeAttribute('disabled');        for (const [page, path] of Object.entries(images)) {            let wrapper = document.createElement('figure');            wrapper.classList.add('mx-2');            if (page === '1') {                let title = document.createElement('button');                title.classList.add('button', 'is-primary', 'mx-1', 'mb-1');                title.innerText = 'Title';                title.setAttribute('data-page', page);                title.setAttribute('data-slide', 'title');                title.onclick = this._registerCrop;                wrapper.appendChild(title);            }            for (let i = 0; i < 4 ; i++) {                let slideCrop = document.createElement('button');                slideCrop.classList.add('button', 'is-primary', 'mx-1');                slideCrop.innerText = 'Slide ' + (i+1);                slideCrop.setAttribute('data-page', page);                slideCrop.setAttribute('data-slide', i);                slideCrop.onclick = this._registerCrop;                wrapper.appendChild(slideCrop);            }            let img = document.createElement('img');            img.src = path;            img.id = 'croppr-' + page;            img.classList.add('image');            // append to container            wrapper.appendChild(img);            container.appendChild(wrapper);            // init cropper            img.addEventListener('load', (e) => {                window.cropprs[page] = new Croppr('#' + e.target.id);            });        }    }    _registerCrop(e) {        let page = parseInt(e.target.dataset.page),            slide = e.target.dataset.slide;        if (slide === 'title') {            window.cropValues[slide] = window.cropprs[page].getValue();        } else {            slide = parseInt(slide);            if (! window.cropValues[page]) {                window.cropValues[page] = {[slide]: window.cropprs[page].getValue()};            } else {                window.cropValues[page][slide] = window.cropprs[page].getValue();            }        }        // print        document.getElementById('crop-values-reader').innerHTML = JSON.stringify(window.cropValues, null, 2);    }    _generatePPT(e) {        let button = this.createPPTbutton;        button.classList.add('is-loading');        // Create a new Presentation        let pres = new PptxGenJS();        pres.layout = 'LAYOUT_16x9';        // add title as first slide        const firstTitleWidth = 9;        const firstTitlePPI = this.imgFullWidth / firstTitleWidth;        pres.addSlide().addImage({            path: this.files["1"]["1"],            w: firstTitleWidth,            h: firstTitleWidth * 1.41,            x: 0.6,            y: 2,            sizing: {                type: 'crop',                x: window.cropValues.title.x / firstTitlePPI,                y: window.cropValues.title.y / firstTitlePPI,                w: window.cropValues.title.width / firstTitlePPI,                h: window.cropValues.title.height / firstTitlePPI            }        });        const imgWidth = 9.8;        const ppi = this.imgFullWidth / imgWidth;        const titleWidth = 4;        const titlePPI = this.imgFullWidth / titleWidth;        this._addSongSlide(pres, imgWidth, ppi, titleWidth, titlePPI);        // Save the Presentation        pres.writeFile(this.pptTitle + '.pptx')            .then(filename => {                console.log('Successfully created ' + filename);                fetch(this.form.action.replace('upload', 'delete'), {                   method: 'POST',                   body: JSON.stringify(this.files)                })                    .then(response => response.json())                    .then(response => {                        if (response.success) {                            console.log('Deleted files');                            button.classList.remove('is-loading');                        }                    });            })            .catch(err => {                console.error(err);            });    };    _addSongSlide(pres, imgWidth, ppi, titleWidth, titlePPI) {        let titleCrop = window.cropValues.title;        delete window.cropValues.title;        const verses = Object.keys(this.files);        for (let verse in this.files) {            for (let page in this.files[verse]) {                for (let slideNum in window.cropValues[page]) {                    // Add a Slide                    let data = window.cropValues[page][slideNum],                        slide = pres.addSlide();                    slide                        .addImage({ // lyric image                            path: this.files[verse][page],                            w: imgWidth,                            h: imgWidth * 1.41,                            x: -0.15,                            y: 0.1,                            sizing: {                                type: 'crop',                                x: data.x / ppi,                                y: data.y / ppi,                                w: data.width / ppi,                                h: data.height / ppi,                            }                        })                        .addImage({ // title image                            path: this.files[verse]["1"],                            w: titleWidth,                            h: titleWidth * 1.41,                            x: 0,                            y: 5,                            sizing: {                                type: 'crop',                                x: titleCrop.x / titlePPI,                                y: titleCrop.y / titlePPI,                                w: titleCrop.width / titlePPI,                                h: titleCrop.height / titlePPI                            }                        });                    verses.map(i => {                        slide.addText(i + '', {                            shape: pres.ShapeType.rect,                            color: (verse === i) ? 'ffffff' : '000000',                            fill: {color: (verse === i) ? 'c0514d' : 'ffffff'},                            line: {color: 'c0514d', width: 2},                            align: 'center',                            x: 10 - ((verses.length - parseInt(i) + 1) * 0.3),                            y: 5.33,                            w: 0.3,                            h: 0.3                        });                    });                }            }        }    }}
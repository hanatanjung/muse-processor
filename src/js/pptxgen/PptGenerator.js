import Croppr from 'croppr';import "croppr/src/css/croppr.css";import pptxgen from "pptxgenjs";export default class PptGenerator {    constructor(form) {        this.form = form;        this.crops = [];        this._eventListeners();    }    _eventListeners() {        this.form.onsubmit = (e) => {            e.preventDefault();            fetch(e.target.action, {                method: 'POST',                body: new FormData(e.target)            })                .then(response => response.json())                .then(response => {                    if (response.success) {                        this._displaySelections(response.files[1]);                    }                });        };    }    _displaySelections(images) {        let container = document.getElementById('scores-display');        container.innerHTML = '';        for (const [page, path] of Object.entries(images)) {            let wrapper = document.createElement('figure');            wrapper.classList.add('croppr');            let img = document.createElement('img');            img.src = path;            img.style.width = '450px';            img.id = 'croppr-' + page;            img.classList.add('image');            // append to container            wrapper.appendChild(img);            container.appendChild(wrapper);            // init cropper            img.addEventListener('load', (e) => {                console.log(e.target)                this.crops.push(new Croppr('#' + e.target.id));            });        }    }    _generate(title, files, crops) {        // Create a new Presentation        let pres = new PptxGenJS();        pres.layout = 'LAYOUT_16x10';        // Add a Slide        let slide = pres.addSlide();        slide.addImage({ path: files[0], x: 1, y: 2 }).addImage({ path: files[1], x: 10, y: 10 });        // Save the Presentation        pres.writeFile(title + '.pptx');    };}